Autor: Tilman Rassy <rassy@math.tu-berlin.de>
$Id: io_interface_mathletfactory.txt,v 1.4 2005/10/10 13:01:10 gronau Exp $


                          IO-INTERFACE MATHLETFACTORY


1. Applet-Parameter
   ================

  1.1 homeworkMode
           "true" oder "false". Falls "true", wird der Hausaufgabenmodus des
           Applets aktiviert und das Applet in diesem Modus gestartet. Default
           ist "false".

           BEMERKUNG: Für Applets, mit denen Aufgaben bearbeitet werden sollen,
           muss also dieser Parameter immer gesetzt und ="true" sein.
           
  1.2. urlPrefix
           Der URL-Prefix des Japs, z.B. "http://japs.mumie.net/cocoon".

  1.3. problemRef
           Eine Datenbank-Id. Bezeichnet die Referenz vom übergeordneten
           Trainingsblatt auf diese Trainings-Aufgabe. Wird für die korrekte
           Zuordnung der Anfragen beim Japs benötigt.
           
  1.4. correctorClass
           Der vollständige Klassenname der Corrector-Klasse in Java-Notation
           (Packages durch Punkte getrennt, keine ".java" Endung), z.B. "net.mumie.corrector.BasisInR3".
           
  Folgende Parameter koennen nur in der Testumgebung benutzt werden:
  
  1.5. debugSheetURL
           Enthält die URL zum Input-Data-Sheet;
           setzt die Parameter "urlPrefix", "problemRef" und "debugSheetFile" ausser Kraft.
  
  1.6. debugSheetFile
           Enthält den Datei-Pfad zum Input-Data-Sheet;
           setzt die Parameter "urlPrefix", "problemRef" und "debugSheetURL" ausser Kraft.
  
  1.7. debug
           "true" oder "false". Falls "true", wird der Debugmodus des
           Applets aktiviert. Auf diese Weise kann die Interaktion HTML-Seite --> Applet OHNE 
           jene Seite getestet werden. Es wird dann im Applet ein "Select"-Button angezeigt.
           Default ist "false".
           


2. Japs->Applet: Download des Input-Data-Sheets
   ============================================

  2.1. Die URL, unter der das Input-Data-Sheet heruntergeladen werden kann,
       wird aus dem URL-Prefix (s. 1.2) und dem Pfad

         "protected/homework/problem-data"

       gebildet. Für letzteren steht in Java die statische Konstante

         JapsPath.PROBLEM_DATA

       zur Verfügung. Die Klasse JapsPath befindet sich im Package
       net.mumie.japs.datasheet.

  2.2. Es muss ein Request-Parameter mit dem Namen "ref" und dem Wert des
       Applet-Parameters problemRef (s. 1.2) gesetzt werden. Für den Namen des
       Request-Parameters steht in Java die statische Konstante

         Japs.RequestParam.PROBLEM_REF

       zur Verfügung. Die Klasse JapsRequestParam befindet sich im Package
       net.mumie.japs.datasheet.


3. Applet->Japs: Upload des Antwort-Data-Sheets
   ============================================

  BEMERKUNG: Technisch gesehen handelt es sich nicht um einen Upload im
       üblichen Sinne, da der Content-Type nicht "multipart/form-data", sondern
       "application/x-www-form-urlencoded" ist, die Daten also wie
       HTML-Formlulardaten übertragen werden (s.u., 3.3). Die Bezeichnung ist
       aber gerechtfertigt, da ein Data-ähnliches Gebilde auf den Server
       hochgeladen wird.

  3.1. Die URL, unter der das Antwort-Data-Sheet an den Japs geschickt werden
       kann, wird aus dem URL-Prefix (s. 1.1) und dem Pfad

         "protected/homework/store-problem-answers"

       gebildet. Für letzteren steht in Java die statische Konstante

         JapsPath.STORE_PROBLEM_ANSWERS

       zur Verfügung. Für die Klasse JapsPath s. 2.1.

  3.2. Es müssen folgende Request-Parameter gesetzt werden:

    3.2.1. Siehe 2.2.

    3.2.2. Ein Parameter mit dem Namen "content, dessen Wert der XML-Code des
           Data-Sheets ist. Für den Namen des Parameters steht in Java die
           statische Konstante 

             Japs.RequestParam.CONTENT

           zur Verfügung. Für die Klasse JapsRequestParam s. 2.2.

           BEMERKUNG: Der Data-Sheet-Code muss hierzu URL-encodet werden, was
           der JapsClient aber automatisch macht.

  3.3. Die Request-Methode sollte POST und der Content-Type
       "application/x-www-form-urlencoded" sein (die Daten werden also wie bei 
       einem HTML-Formular übertragen). Den Content-Type setzt der JapsClient
       automatisch richtig (korrekte Anwendung vorausgesetzt, vgl. Beispiel
       4.2).

  3.4. Als Response schickt der Server ein Text-Dokument (Content-Type
       "text/plain") zurück. Die möglichen Inhalte und ihre Bedeutung sind
       folgende:

    3.4.1. "OK: Answers saved" - Das Data-Sheet wurde erfolgreich in der
           Datenbank gespeichert.

    3.4.2. "ERROR: Not a course member" - Die Daten konnten nicht gespeichert
           werden, da der Benutzer nicht Teilnehmer des Kurses ist.

    3.4.3. "ERROR: Before timeframe" - Die Daten konnten nicht gespeichert
           werden, da der Bearbeitungszeitraum noch nicht begonnen hat.

    3.4.4. "ERROR: After timeframe" - Die Daten konnten nicht gespeichert
           werden, da der Bearbeitungszeitraum bereits verstrichen ist.

    3.4.5. "ERROR: Http error: CODE: DESCRIPTION" - Ein Http-Fehler ist
           aufgetreten. CODE ist der Response-Code, DESCRIPTION eine
           Beschreibung des Fehlers. BEMERKUNG: Ob ein solcher Fehler
           aufgetreten ist, kann auch durch direktes Abfragen des Server
           Response Codes festgestellt werden.




4. Beispiele (Java-Code)
   =====================

  4.1. Download des Input-Data-Sheets:

  // Initializing japs client:
  JapsClient client = new AppletJapsClient(urlPrefix, this);

  // Providing a document builder:
  DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  DocumentBuilder documentBuilder = factory.newDocumentBuilder();

  // Loading data sheet:
  DataSheet inputDataSheet = null;
  Map params = new Hashtable();
  params.put(JapsRequestParam.PROBLEM_REF, problemRef);
  HttpURLConnection connection =
    client.get(JapsPath.PROBLEM_DATA, params);
  if ( connection != null )
    {
      Document document = documentBuilder.parse(connection.getInputStream());
      inputDataSheet = new DataSheet(document);
      System.out.println("Loaded input data sheet from server");
    }
  else
    System.err.println("User has canceled login dialog");


  4.2. Upload des Antwort-Data-Sheets:

  // Initializing japs client:
  JapsClient client = new AppletJapsClient(urlPrefix, this);

  // Sending data sheet:
  Map params = new Hashtable();
  params.put(JapsRequestParam.PROBLEM_REF, problemRef);
  params.put(JapsRequestParam.CONTENT, answerDataSheet.toXMLCode());
  HttpURLConnection connection =
    client.post(JapsPath.STORE_PROBLEM_ANSWERS, params);
  if ( connection != null )
    System.out.println("Sent answer data sheet to server");
  else
    System.err.println("User has canceled login dialog");



-- ENDE DER DATEI --