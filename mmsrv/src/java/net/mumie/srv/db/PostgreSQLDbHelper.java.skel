package net.mumie.srv.db;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import net.mumie.srv.notions.DbColumn;
import net.mumie.srv.notions.DbTable;
import net.mumie.srv.notions.EntityType;
import net.mumie.srv.notions.TimeFormat;
import net.mumie.srv.service.LookupNotifyable;
import net.mumie.srv.service.ServiceInstanceStatus;
import net.mumie.srv.service.ServiceStatus;
import net.mumie.srv.util.LogUtil;
import org.apache.avalon.excalibur.pool.Recyclable;
import org.apache.avalon.framework.activity.Startable;
import org.postgresql.PGConnection;
import org.postgresql.PGStatement;
import org.postgresql.largeobject.*;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;

/**
 * PostgreSQL-specific methods for database access
 *
 * @author <a href="mailto:rassy@math.tu-berlin.de">Tilman Rassy</a>,
 * <a href="mailto:lehmannf@math.tu-berlin.de">Fritz Lehmann-Grube</a>
 * <a href="mailto:sinha@math.tu-berlin.de">Uwe Sinha</a>
 *
 * @version $Id: PostgreSQLDbHelper.java.skel,v 1.3 2008/10/20 15:56:00 rassy Exp $
 */

public class PostgreSQLDbHelper extends AbstractDbHelper
  implements Startable, Recyclable, LookupNotifyable 
{
  // --------------------------------------------------------------------------------
  // Global variables and constants
  // --------------------------------------------------------------------------------

  /**
   * The status object of this class.
   */

  private static ServiceStatus serviceStatus = new ServiceStatus(PostgreSQLDbHelper.class);

  /**
   * Size of the byte arrays used as buffers when reading or writing data.
   */

  protected static final int IO_BUFFER_SIZE = 2048; 

  // --------------------------------------------------------------------------------
  // Large objects
  // --------------------------------------------------------------------------------

  /**
   * Reads the large object with the specified OID and writes it to the specified output
   * stream.
   */

  protected synchronized void queryLargeObject (int oid, OutputStream outputStream)
    throws SQLException
  {
    final String METHOD_NAME = "queryLargeObject";
    this.logDebug(METHOD_NAME + " 1/2: Started. oid = " + oid);

    // All large object API calls must be within a transaction block. We use a variant
    // of the transaction framework used in Mumie (see methods beginTransaction,
    // endTransaction, abortTransaction) which does not care about the isolation level
    // and other transactions running at the same time.

    // Save current autocommit state:
    boolean oldAutocommitState = this.connection.getAutoCommit();

    try
      {
        // Set autocommit state to false:
        this.connection.setAutoCommit(false);

        // Get a large object manager:
        LargeObjectManager manager = this.getConnectionAsPGConnection().getLargeObjectAPI();

        // Open the large object for reading
        LargeObject largeObject = manager.open(oid, LargeObjectManager.READ);

        // Copy the data from the large object to the output stream:
        byte buffer[] = new byte[IO_BUFFER_SIZE];
        int num = 0;
        int totalNum = 0;
        while ((num = largeObject.read(buffer, 0, IO_BUFFER_SIZE)) > 0)
          {
            outputStream.write(buffer, 0, num);
            totalNum += num;
          }
        outputStream.flush();

        if ( totalNum != largeObject.size() )
          throw new IllegalStateException
            (METHOD_NAME +
             ": Mumber of transferred bytes does not coincides with object size " +
             "(" + totalNum + ", " + largeObject.size() + ")");
        
        // Close the large object:
        largeObject.close();
	
        // Commit the large object operation (this is due to Oliver Jowett):
        this.connection.commit();

        this.logDebug
          (METHOD_NAME + " 2/2: Done. " + totalNum + " bytes read"); 
      }
    catch(Exception exception)
      {
        throw new SQLException(this.getIdentification() + ": " + exception);
      }
    finally
      {
        // Restore old autocommit state:
        this.connection.setAutoCommit(oldAutocommitState);
      }
  }

  /**
   * Writes the data read from the specified input stream as a large object to the
   * database and returns the OID.
   */

  protected synchronized int storeLargeObject (InputStream inputStream)
    throws SQLException
  {
    final String METHOD_NAME = "storeLargeObject";
    this.logDebug(METHOD_NAME + " 1/2: Started.");

    // All large object API calls must be within a transaction block. We use a variant
    // of the transaction framework used in Mumie (see methods beginTransaction,
    // endTransaction, abortTransaction) which does not care about the isolation level
    // and other transactions running at the same time.

    // Save current autocommit state:
    boolean oldAutocommitState = this.connection.getAutoCommit();

    try
      {
        // Set autocommit mode to false:
        this.connection.setAutoCommit(false);

        // Get a large object manager:
        LargeObjectManager manager = this.getConnectionAsPGConnection().getLargeObjectAPI();

        // Create a new large object:
        int oid = manager.create(LargeObjectManager.READ | LargeObjectManager.WRITE);

        // Open the large object for writing:
        LargeObject largeObject = manager.open(oid, LargeObjectManager.WRITE);

        // Copy the data from the input stream to the large object:
 	byte buffer[] = new byte[IO_BUFFER_SIZE];
	int num = 0;
        int totalNum = 0;
	while ( (num = inputStream.read(buffer, 0, IO_BUFFER_SIZE)) > 0 )
	  {
	    largeObject.write(buffer, 0, num);
            totalNum += num;
	  }

        if ( totalNum != largeObject.size() )
          throw new IllegalStateException
            (METHOD_NAME +
             ": Mumber of transferred bytes does not coincides with object size " +
             "(" + totalNum + ", " + largeObject.size() + ")");

	// Close the large object
	largeObject.close();

        this.logDebug(METHOD_NAME + "2/2: Done. oid = " + oid); 
	return oid;
      }
    catch(Exception exception)
      {
        throw new SQLException(this.getIdentification() + ": " + exception);
      }
    finally
      {
        // Restore old autocommit state:
        this.connection.setAutoCommit(oldAutocommitState);
      }
  }

  // --------------------------------------------------------------------------------
  // Utilities
  // --------------------------------------------------------------------------------

  /**
   * Returns the id for a given oid.
   * @param oid the oid.
   * @param table the table where to search for the id.
   */

  protected int getIdForOid (long oid, String table)
    throws SQLException
  {
    final String METHOD_NAME = "getIdForOid";
    this.logDebug(METHOD_NAME + "1/3: oid = " + oid + ", table = " + table);
    String query =
      "SELECT " + DbColumn.ID + " FROM " + table + " WHERE oid = " + oid;
    this.logDebug(METHOD_NAME + "2/3: query = " + query);
    ResultSet resultSet = this.connection.createStatement().executeQuery(query);
    if ( ! resultSet.next() )
      throw new SQLException
        ("Failed to find id for oid: oid = " + oid + ", table = " + table +
         ": Result set empty");
    int id = resultSet.getInt(1);
    this.logDebug(METHOD_NAME + "3/3: id = " + id);
    return id;
  }

  /**
   * Casts this db helper's connection to {@link PGConnection PGConnection} and returns
   * it. Checks if this db helper's connection is an instance of
   * {@link PGConnection PGConnection} before, and throws an exception if it is not.
   */

  protected PGConnection getConnectionAsPGConnection ()
    throws SQLException, IllegalStateException
  {
    final String METHOD_NAME = "getConnectionAsPGConnection";
    this.logDebug
      (METHOD_NAME + " 1/2: Started. this.connection = " + this.connection);

    // Check if this dbHelpper's connection is indeed a PGConnection:
    if ( ! ( this.connection instanceof PGConnection ) )
      throw new IllegalStateException("Not a PgConnection: " + this.connection);

    // Do the cast:
    PGConnection pgConnection = (PGConnection)this.connection; 

    this.logDebug
      (METHOD_NAME + " 1/2: Done. pgConnection = " + pgConnection);

    return pgConnection;
  }

  /**
   * Pre-processes the specified column name. Replaces
   * {@link DbColumn#SETION_PATH DbColumn.SETION_PATH} by
   * <pre>
   *   "path_for_section_id(" +  {@link DbColumn#CONTAINED_IN DbColumn.CONTAINED_IN} + ") AS " + {@link DbColumn#SECTION_PATH DbColumn.SECTION_PATH}</pre>
   * and leaves other column names unchanged.
   */

  protected String filterColumn (String column)
    throws SQLException
  {
    return
      (column.equals(DbColumn.SECTION_PATH)
       ? "path_for_section_id(" + DbColumn.CONTAINED_IN + ") AS " + DbColumn.SECTION_PATH
       : column);
  }

  /**
   * Does the same as {@link #filterColumn(String) filterColumn(String)}, but adds the
   * specified prefix to the column name in addition.
   */

  protected String filterColumn (String column, String prefix)
    throws SQLException
  {
    return
      (column.equals(DbColumn.SECTION_PATH)
       ? "path_for_section_id(" + prefix + "." + DbColumn.CONTAINED_IN + ") AS " +
         DbColumn.SECTION_PATH
       : prefix + "." + column);
  }

  // --------------------------------------------------------------------------------
  // Lifecycle related methods
  // --------------------------------------------------------------------------------

  /**
   * Creates a new <code>PostgreSQLDbHelper</code>.
   */

  public PostgreSQLDbHelper ()
  {
    this.instanceStatus = new ServiceInstanceStatus(serviceStatus);
    this.instanceStatus.notifyCreation();
  }

  /**
   * Retrieves a connection to the database and sets {@link #connection} to it.
   */

  public void start ()
    throws Exception
  {
    final String METHOD_NAME = "start";
    this.logDebug(METHOD_NAME + " 1/2");
    this.connection = DriverManager.getConnection
      (this.connectionUrl + this.connectionName, this.userName, this.userPassword);
    this.instanceStatus.notifyStart();
    this.logDebug
      (METHOD_NAME + " 2/2: this.connection = " + connection);
  }

  /**
   * Closes the database connection. I.e., calls {@link #connection}'s <code>close</code> method.
   */

  public void stop ()
    throws Exception
  {
    final String METHOD_NAME = "stop";
    this.logDebug(METHOD_NAME + " 1/2: Started");
    this.connection.close();
    this.instanceStatus.notifyStop();
    this.logDebug
      (METHOD_NAME + " 2/2: Done");
  }

  /**
   * Recycles this <code>PostgreSQLDbHelper</code>.
   */

  public void recycle ()
  {
    final String METHOD_NAME = "recycle";
    this.logDebug(METHOD_NAME + " 1/2: Started");
    super.recycle();
    this.instanceStatus.notifyRecycle();
    this.logDebug(METHOD_NAME + " 2/2: Done");
  }

  // ================================================================================
  // Autocoded methods start
  // ================================================================================

  //#AUTOCODED

  // ================================================================================
  // Autocoded methods end
  // ================================================================================
}
