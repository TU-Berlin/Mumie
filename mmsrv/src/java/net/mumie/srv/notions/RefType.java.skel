package net.mumie.srv.notions;

public class RefType
{
  // --------------------------------------------------------------------------------
  // Global variabled and constants, except autocoded 
  // --------------------------------------------------------------------------------

  /**
   * The undefined reference type.
   */

  public static final int UNDEFINED = -1;

  // --------------------------------------------------------------------------------
  // Auxiliaries 
  // --------------------------------------------------------------------------------

  /**
   * Returns the array index of the specified reference type code.
   */

  protected static final int indexOf (int code)
  {
    int index = -1;
    for (int i = 0; i < refTypes.length && index == -1; i++)
      {
        if ( refTypes[i] == code )
          index = i;
      }
    if ( index == -1 )
      throw new IllegalArgumentException("Invalid reference type code: " + code);
    return index;
  }

  /**
   * Returns the array index of the reference type with the specified name.
   */

  protected static final int indexOf (String name)
  {
    int index = -1;
    for (int i = 0; i < names.length && index == -1; i++)
      {
        if ( names[i].equals(name) )
          index = i;
      }
    if ( index == -1 )
      throw new IllegalArgumentException("Invalid reference type name: " + name);
    return index;
  }

  // --------------------------------------------------------------------------------
  // Getting codes for names and vice versa
  // --------------------------------------------------------------------------------

  /**
   * Returns the name for the (pseudo-)document type represented by the specified numerical
   * code.
   */

  public static final String nameFor (int code)
  {
    return names[indexOf(code)];
  }

  /**
   * Returns the numerical code for the specified (pseudo-)document type name.
   */

  public static final int codeFor (String name)
  {
    return refTypes[indexOf(name)];
  }

  // --------------------------------------------------------------------------------
  // Checking whether a code or name exists as a reference type
  // --------------------------------------------------------------------------------

  /**
   * Returns true if the specified integer exists as a reference type code;
   * otherwise returns false.
   */

  public static final boolean exists (int code)
  {
    for (int i = 0; i < refTypes.length; i++)
      {
        if ( refTypes[i] == code )
          return true;
      }
    return false;
  }

  /**
   * Returns true if the specified string exists as a reference type name;
   * otherwise returns false.
   */

  public static final boolean exists (String name)
  {
    for (int i = 0; i < names.length; i++)
      {
        if ( names[i].equals(name) )
          return true;
      }
    return false;
  }

  // --------------------------------------------------------------------------------
  // Getting all reference types
  // --------------------------------------------------------------------------------

  /**
   * Returns an array containing all reference types. The array is is not backed by any
   * variables of this class, so changes to the array do not effect this class. 
   */

  public static final int[] allRefTypes ()
  {
    int[] refTypesCopy = new int[refTypes.length];
    System.arraycopy(refTypes, 0, refTypesCopy, 0, refTypes.length);
    return refTypesCopy;
  }

  // ================================================================================
  // Autocoded methods start
  // ================================================================================

  //#AUTOCODED

  // ================================================================================
  // Autocoded methods end
  // ================================================================================

  /**
   * Disabled constructor.
   */

  private RefType ()
    throws IllegalAccessException
  {
    throw new IllegalAccessException("RefType must not be instanciated");
  }
}