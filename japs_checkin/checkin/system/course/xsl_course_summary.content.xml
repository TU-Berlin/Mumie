<?xml version="1.0" encoding="ASCII"?>


<!--
  The MIT License (MIT)
  
  Copyright (c) 2010 Technische Universitaet Berlin
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
-->

<!DOCTYPE stylesheet
  [
   <!ENTITY br  "&#xA;">
   <!ENTITY sp  "  ">
  ]
>

<!--
   Author:  Tilman Rassy

   $Id: xsl_course_summary.content.xml,v 1.22 2009/12/08 12:54:10 linges Exp $
-->

<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xsl-ext="http://www.mumie.net/xml-namespace/xsl-ext"
                xmlns:mumie="http://www.mumie.net/xml-namespace/document/metainfo"
                xmlns:sum="http://www.mumie.net/xml-namespace/document/summary"
                xmlns:mtx="http://www.mumie.net/xml-namespace/mmtex"
                xmlns:math="http://www.w3.org/1998/Math/MathML"
                xmlns:math-ext="http://www.mumie.net/xml-namespace/mathml-ext"
                xmlns="http://www.w3.org/1999/xhtml"
                exclude-result-prefixes="xsl-ext mumie sum mtx math math-ext">

<xsl-ext:import lid="xsl-util" internal="yes"/>
<xsl-ext:import lid="xsl-mmtex-stdlayout" internal="yes"/>
<xsl-ext:import lid="xsl-mmtex-struct" internal="yes"/>
<xsl-ext:import lid="xsl-mmtex-math" internal="yes"/>
<xsl-ext:import lid="xsl-mmtex-media" internal="yes"/>
<xsl-ext:import lid="xsl-summary-i18n" internal="yes"/>

<xsl:output method="xml"
            doctype-public="-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
            doctype-system="http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd"
            encoding="ASCII"/>

<xsl-ext:insert-japs-xsl-lib/>

<!--
  ================================================================================
  Global variables
  ================================================================================
-->

<!-- Id of the course: -->
<xsl:variable name="course-id">
  <xsl:call-template name="xsl.get-param-from-dynamic-data">
    <xsl:with-param name="name">course</xsl:with-param>
  </xsl:call-template>
</xsl:variable>

<!-- Id of the user: -->
<xsl:variable name="user-id">
  <xsl:value-of select="/*/mumie:dynamic_data/mumie:store[@name = 'user']/mumie:user/@id"/>
</xsl:variable>

<!-- Whether the "load" button shall be displayed: -->
<xsl:variable name="with-load-button">
  <xsl:call-template name="xsl.boolean-to-yes-or-no">
    <xsl:with-param name="boolean">
      <xsl:call-template name="xsl.get-param-from-dynamic-data">
        <xsl:with-param name="name">with-load-button</xsl:with-param>
        <xsl:with-param name="default">no</xsl:with-param>
      </xsl:call-template>
    </xsl:with-param>
  </xsl:call-template>
</xsl:variable>

<!-- Whether the user is a member of the course -->
<xsl:variable name="is-course-member">
  <xsl:call-template name="xsl.boolean-to-yes-or-no">
    <xsl:with-param name="boolean">
      <xsl:call-template name="xsl.get-param-from-dynamic-data">
        <xsl:with-param name="name">is-course-member</xsl:with-param>
        <xsl:with-param name="default">no</xsl:with-param>
      </xsl:call-template>
    </xsl:with-param>
  </xsl:call-template>
</xsl:variable>

<!-- Whether the user is a member of the staff -->
<xsl:variable name="is-staff-member">
  <xsl:call-template name="xsl.boolean-to-yes-or-no">
    <xsl:with-param name="boolean">
      <xsl:call-template name="xsl.get-param-from-dynamic-data">
        <xsl:with-param name="name">is-staff-member</xsl:with-param>
        <xsl:with-param name="default">no</xsl:with-param>
      </xsl:call-template>
    </xsl:with-param>
  </xsl:call-template>
</xsl:variable>

<!-- Whether tutor view is enabled -->
<xsl:variable name="tutor-view">
  <xsl:call-template name="xsl.boolean-to-yes-or-no">
    <xsl:with-param name="boolean">
      <xsl:call-template name="xsl.get-param-from-dynamic-data">
        <xsl:with-param name="name">tutor-view</xsl:with-param>
        <xsl:with-param name="default">no</xsl:with-param>
      </xsl:call-template>
    </xsl:with-param>
  </xsl:call-template>
</xsl:variable>

<!-- Whether this is the response after a failed selection of a student
     (tutor view only) -->
<xsl:variable name="student-selection-failed">
  <xsl:call-template name="xsl.boolean-to-yes-or-no">
    <xsl:with-param name="boolean">
      <xsl:call-template name="xsl.get-param-from-dynamic-data">
        <xsl:with-param name="name">student-selection-failed</xsl:with-param>
        <xsl:with-param name="default">no</xsl:with-param>
      </xsl:call-template>
    </xsl:with-param>
  </xsl:call-template>
</xsl:variable>

<!-- Whether this content is shown in a frame -->
<xsl:variable name="as-frame">
  <xsl:call-template name="xsl.boolean-to-yes-or-no">
    <xsl:with-param name="boolean">
      <xsl:call-template name="xsl.get-param-from-dynamic-data">
        <xsl:with-param name="name">as-frame</xsl:with-param>
        <xsl:with-param name="default">no</xsl:with-param>
      </xsl:call-template>
    </xsl:with-param>
  </xsl:call-template>
</xsl:variable>

<!-- Error message, in case the student selection failed (tutor view only)-->
<xsl:variable name="student-selection-error-message">
  <xsl:call-template name="xsl.get-param-from-dynamic-data">
    <xsl:with-param name="name">student-selection-error-message</xsl:with-param>
  </xsl:call-template>
</xsl:variable>

<!-- Whether the results button should be displayed: -->
<xsl:variable name="with-results-button">
  <xsl:choose>
    <xsl:when test="( $is-course-member = 'yes' or $is-staff-member = 'yes' )">
      <xsl:text>yes</xsl:text>
    </xsl:when>
    <xsl:otherwise>no</xsl:otherwise>
  </xsl:choose>
</xsl:variable>

<!-- The URL of this page -->
<xsl:variable name="this-url">
  <xsl:call-template name="xsl.document-url">
    <xsl:with-param name="context">homework</xsl:with-param>
    <xsl:with-param name="document-type.name">course</xsl:with-param>
    <xsl:with-param name="id" select="$course-id"/>
  </xsl:call-template>
</xsl:variable>

<!-- HTML id of the main element, ie. the "table" element containing all the content -->
<xsl:variable name="main-element-html-id">_MAIN_</xsl:variable>

<!-- The HTML id of the 'div' element representing the change-student dialog. -->
<xsl:variable name="change-student-html-id">_CHANGE_STUDENT_</xsl:variable>

<!-- The HTML id of the 'div' element representing the error message dialog. -->
<xsl:variable name="error-html-id">_ERROR_</xsl:variable>

<!--
  ================================================================================
  JavaScript
  ================================================================================
-->

<xsl:template name="javascript">

  <!-- 
    Popup "windows"
  -->

  <xsl:call-template name="popup-javascript">
    <xsl:with-param name="main" select="$main-element-html-id"/>
  </xsl:call-template>
  
  
  function initPage ()
  {
  <xsl:if test="$student-selection-failed='yes'">
    popupCentered("<xsl:value-of select="$error-html-id"/>");
  </xsl:if>
  
  <!-- Currently disabled:
       popupCentered("<xsl:value-of select="$init-applet-msg-html-id"/>");
       waitForApplet(); -->
  }   


</xsl:template>

<!--
  ================================================================================
  Header
  ================================================================================
-->    

<xsl:template name="header">
  <table class="header">
    <tr>
      <td>
        <div class="doctype">
          <xsl:value-of select="$i18n-course"/>
        </div>
      </td>
      <td>
        <div class="title">
          <xsl:variable name="title" select="/*/mumie:content/sum:summary/mtx:title"/>
          <xsl:choose>
            <xsl:when test="$title">
              <xsl:apply-templates select="$title" mode="header"/>
            </xsl:when>
            <xsl:otherwise>
              <!-- TODO: course section name as fallback -->
            </xsl:otherwise>
          </xsl:choose>
        </div>
      </td>
    </tr>
  </table>
</xsl:template>

<xsl:template match="mtx:title" mode="header">
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="mtx:title">
  <!-- Ignored in normal processing -->
</xsl:template>

<!--
  ================================================================================
  Student selection
  ================================================================================
-->

<!--
  Popup-"window" informing the user that a previeous student selection failed
-->

<xsl:template name="student-selection-failed-msg">
  <div id="{$error-html-id}" class="dialog">
    <table class="dialog">
      <thead>
        <tr>
          <td class="error">
            <xsl:value-of select="$i18n-error"/>
          </td>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>
            <xsl:value-of select="$i18n-error-in-student-selection"/>
          </td>
        </tr>
        <tr>
          <td>
            <xsl:value-of select="$student-selection-error-message"/>
          </td>
        </tr>
        <tr>
          <td>
            <xsl:value-of select="$i18n-try-again"/>
          </td>
        </tr>
        <tr>
          <td>
            <button type="button"
                    onclick="javascript:closeWindow('{$error-html-id}')">
              <xsl:value-of select="$i18n-close-window"/>
            </button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</xsl:template>

<!--
  Popup-"window" for selecting a student
-->

<xsl:template name="select-sudent-dialog">
  <div id="{$change-student-html-id}" class="dialog">
    <form method="get" action="{$this-url}">
      <table class="dialog">
        <thead>
          <tr>
            <td colspan="2">
              <xsl:value-of select="$i18n-change-student"/>
            </td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="2">
              <xsl:value-of select="$i18n-new-student"/>
              <xsl:text>: Id = </xsl:text>
              <input type="text" name="student" size="5"/>
            </td>
          </tr>
          <tr>
            <td colspan="2">
              <a class="button">
                <xsl:attribute name="href">
                  <xsl:value-of select="concat($this-url, '?student=clear')"/>
                </xsl:attribute>
                <xsl:value-of select="$i18n-clear-student"/>
              </a>
            </td>
          </tr>
          <tr>
            <td>
              <button type="submit">Ok</button>
            </td>
            <td>
              <button type="button"
                      onclick="javascript:closeWindow('{$change-student-html-id}')">
                <xsl:value-of select="$i18n-cancel"/>
              </button>
            </td>
          </tr>
        </tbody>
      </table>
    </form>
  </div>  
</xsl:template>

<xsl:template name="student-selection">
  <table class="meta">
    <tr>
      <td class="left">
        <xsl:choose>
          <xsl:when test="$tutor-view='yes'">
            <xsl:variable name="student" select="//mumie:store[@name='user']/mumie:user"/>
            <!-- Name: -->
            <span class="label"><xsl:value-of select="$i18n-student"/>:</span>
            <span class="value">
              <xsl:value-of select="$student/mumie:first_name"/>
              <xsl:text> </xsl:text>
              <xsl:value-of select="$student/mumie:surname"/>        
            </span>
            <!-- Account: -->
            <span class="label"><xsl:value-of select="$i18n-account"/>:</span>
            <span class="value"><xsl:value-of select="$student/mumie:login_name"/></span>
            <!-- Id: -->
            <span class="label"><xsl:value-of select="$i18n-id"/>:</span>
            <span class="value"><xsl:value-of select="$student/@id"/></span>
          </xsl:when>
          <xsl:otherwise>
            <span class="label"><xsl:value-of select="$i18n-student"/>:</span>
            <span class="value"><xsl:value-of select="$i18n-no-student-selected"/></span>
          </xsl:otherwise>
        </xsl:choose>
      </td>
      <td class="right">
        <!-- "Change" button: -->
        <button type="button" class="inline"
                onclick="javascript:popupAtMouse('{$change-student-html-id}', event)">
          <xsl:value-of select="$i18n-change"/>
        </button>
      </td>
    </tr>
  </table>
</xsl:template>

<!--
  ================================================================================
  Buttons
  ================================================================================
-->

<!--
  'Results' button
-->

<xsl:template name="results-button">
  <a onclick="">
    <xsl:attribute name="class">button</xsl:attribute>
      <xsl:attribute name="target">main</xsl:attribute>
      <xsl:attribute name="href">
        <xsl:value-of select="concat($xsl.url-prefix, '/protected/view/user-problem-grades?course=', $course-id, '&amp;as-frame=yes')"/>
      </xsl:attribute>
      <xsl:value-of select="$i18n-results"/>
  </a>
</xsl:template>

<!--
  Button-area
-->

<xsl:template name="buttons">
  <div class="buttons">
    <!-- 'Results' button: -->
    <xsl:if test="$with-results-button='yes'">
      <xsl:call-template name="results-button"/>
    </xsl:if>
  </div>
</xsl:template>

<!--
  ================================================================================
  Top-level structure
  ================================================================================
-->    

<xsl:template match="/">
  <html>
    <head>
      <title>
        <xsl:value-of select="/*/mumie:name"/>
      </title>
      <link rel="stylesheet" type="text/css">
        <xsl:attribute name="href"><xsl-ext:url lid="css-base"/></xsl:attribute>
      </link>
      <link rel="stylesheet" type="text/css">
        <xsl:attribute name="href"><xsl-ext:url lid="css-mmtex-stdlayout"/></xsl:attribute>
      </link>
      <link rel="stylesheet" type="text/css">
        <xsl:attribute name="href"><xsl-ext:url lid="css-element"/></xsl:attribute>
      </link>
      <link rel="stylesheet" type="text/css">
        <xsl:attribute name="href"><xsl-ext:url lid="css-summary"/></xsl:attribute>
      </link>
      <script type="text/javascript">
        <xsl:call-template name="javascript"/>
      </script>
    </head>
    <body onload="javascript:initPage()">
      <table id="{$main-element-html-id}" class="root">
        <tr>
          <td>
            <!-- Header: -->
            <xsl:call-template name="header"/>
          </td>
        </tr>
        <xsl:if test="$is-staff-member='yes'">
          <tr>
            <td>
              <!-- Student selection: -->
              <xsl:call-template name="student-selection"/>
            </td>
          </tr>
        </xsl:if>
        <tr>
          <td>
            <!-- Main: -->
            <div class="plain">
              <xsl:apply-templates select="/*/mumie:content/sum:summary/*"/>
            </div>
          </td>
        </tr>
        <tr>
          <td>
            <!-- Buttons: -->
            <xsl:call-template name="buttons"/>
          </td>
        </tr>
        <tr>
          <td colspan="2">
            <!-- Footer: -->
            <xsl:call-template name="footer"/>
          </td>
        </tr>
      </table>
      <xsl:if test="$student-selection-failed='yes'">
        <!-- The message saying that the student selection failed: -->
        <xsl:call-template name="student-selection-failed-msg"/>
      </xsl:if>
      <!-- The student-selection dialog: -->
      <xsl:call-template name="select-sudent-dialog"/>
    </body>
  </html>
</xsl:template>

</xsl:stylesheet>