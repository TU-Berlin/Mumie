#!/bin/bash

# The MIT License (MIT)
# 
# Copyright (c) 2010 Technische Universitaet Berlin
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# $Id: build.sh.tpl.prot,v 1.4 2008/09/23 11:04:12 rassy Exp $

# Build script for @package-name@

# Set fixed variabes (constants):
readonly program_name=build.sh
readonly program_version='$Revision: 1.4 $'
readonly user_config_file=build.conf

# Init customizable variables:
prefix=${MM_BUILD_PREFIX:-/usr/local}
checkin_root=${MM_CHECKIN_ROOT:-$HOME/mumie/checkin}
mmtex_cmd=mmtex
mmtex_opts="-w"

# Source user config file:
[ -e "$user_config_file" ] && source "$user_config_file"

# Set default task:
task=process_targets

# Process command line parameters:
params=`getopt \
  --longoptions force,targets,ignore-deps,help,version,vars,release:,cvsroot: \
  --options f,t,D,h,v \
  -- \
  "$@"`
if [ $? -ne 0 ] ; then exit 1 ; fi
eval set -- "$params"
while true ; do
  case "$1" in
    --targets|-t) task=show_targets ; shift ;;
    --ignore-deps|-D) ignore_deps=ignore_deps ; shift ;;
    --help|-h) task=show_help ; shift ;;
    --version|-v) task=show_version ; shift ;;
    --vars) task=print_variables ; shift ;;
    --force|-f) force=force ; shift ;;
    --release) release="$2" ; shift 2 ;;
    --cvsroot) cvsroot="$2" ; shift 2 ;;
    --) shift ; break ;;
  esac
done
targets=${*:-'all'}

# File storing version number, if any:
version_file=VERSION

# Store the current directory:
base_dir=`pwd`

# The "mount path":
mount_path="@mount-path@"

# "Extra" directories (media, media/applets, etc)
extra_dirs="@extra-dirs@"

# File storing the top-level sections:
sections_file=$base_dir/var/SECTIONS

# --------------------------------------------------------------------------------
# Utility functions
# --------------------------------------------------------------------------------

# Prints the time of last modification of a file to stdout. The time is expressed
# as seconds since Epoch
function mtime
  {
    run_cmd stat -c %Y $1
  }

# Compares a target and a source file and prints "needs_build" to stdout if the
# target file needs to be (re)build; otherwise, prints the empty string.
# Usage: needs_build SOURCE_FILE TARGET_FILE
function needs_build
  {
    local source_file=$1
    local target_file=$2
    if [ "$force" ] || \
       [ ! -e "$target_file" ] || \
       [ `stat -c %Y "$source_file"` -gt `stat -c %Y "$target_file"` ]
    then
      echo "needs_build"
    else
      echo ""
    fi
  }

# Aborts with an error message
function error
  {
    echo "ERROR: $*" 1>&2
    echo  1>&2
    exit 1
  } 

# Checks the exit code of the last command, terminates with an error message if the
# exit code is not 0
function check_exit_code
  {
    local exit_code=$?
    [ "$exit_code" -eq 0 ] || error "Last command returned with code $exit_code"
  }

# Runs a command, checks the exit code, terminates with an error message if the exit
# code is not 0
function run_cmd
  {
    "$@"
    check_exit_code
  }

# Checks if one string is contained within another. Usage:
#
#   contains_substr STR SUBSTR
#
# Returns 0 if SUBSTR is contained in STR, otherwise 1.

function contains_substr
  {
    local str=$1
    local substr=$2
    echo "$str" | fgrep "$substr" > /dev/null 2>&1
  }

# Creates the directories in the global checkin tree provided they do not exist already.
# Parent directories are created if necessary. The directories and their parents are
# equipped with .meta.xml files if the latter do not exist already (this is done even
# if the directories itselfs existed before).

function create_checkin_dirs
  {
    run_cmd mkdir -pv $checkin_root/$mount_path

    local path=$mount_path
    while [ "$path" ] && [ "$path" != "." ] ; do
      [ -e "$checkin_root/$path/.meta.xml" ] || \
        run_cmd cp -v $base_dir/checkin/$path/.meta.xml $checkin_root/$path
      path=`dirname $path`
    done
   
    if [ "$extra_dirs" ] ; then
      local extra_dir
      for extra_dir in $extra_dirs ; do
        local extra_path=$mount_path/$extra_dir
        run_cmd mkdir -pv $checkin_root/$extra_path
        [ -e "$checkin_root/$extra_path/.meta.xml" ] || \
          run_cmd cp -v $base_dir/checkin/$extra_path/.meta.xml $checkin_root/$extra_path
      done
    fi
  }

# Creates links in a directory of the global checkin tree. Usage:
#
#   link_checkin_dirs PATH EXCLUDE
#
# PATH is the path of the directory relative to the checkin root. EXCLUDE is a whitespace-
# separated list of subdirectories to exclude from linking. A subdirectory with the name
# "CVS" is excluded even if it is not listed in EXCLUDE. For each subdirectory which is not
# excluded, a softlink is made in $checkin_root/PATH. In each linked directory, a .dir file
# is created. This is done by calling the 'create_dot_dir_files' function.

function link_checkin_dirs
  {
    local path="$1"
    local all_subdirs="`ls $base_dir/checkin/$path`"
    local excluded_dirs="$2"

    local subdirs=""
    local item
    for item in $all_subdirs ; do
      if ! contains_substr " $excluded_dirs " " $item " ; then
        subdirs="$subdirs $item"
        echo " $path/$item" >> $sections_file
        check_exit_code
      fi
    done

    local old_dir=`pwd`

    run_cmd cd $checkin_root/$path
    echo "$program_name: changed into `pwd`"
    local subdir
    for subdir in $subdirs ; do
      local subdir_abs=$base_dir/checkin/$path/$subdir
      if [ -d "$subdir_abs" ] && [ "$subdir" != 'CVS' ] ; then
        [ -h "$subdir" ] || run_cmd ln -vs $subdir_abs
        create_dot_dir_files $path/$subdir $subdir
      fi
    done

    run_cmd cd $old_dir
    echo "$program_name: returned into $old_dir"
  }

# Recursivly creates .dir files. Usage:
#
#   create_dot_dir_files PATH NAME
#
# PATH is the path relative to the checkin root of the directory where to start. NAME
# is the local name of that directory. It is assumed that the parent of that directory
# is the current working directory when the function is entered.

function create_dot_dir_files
  {
    local path=$1
    local name=$2
    run_cmd cd $name
    echo "$program_name: changed into $name"
    echo "$program_name: creating .dir"
    echo -n $checkin_root/$path > .dir
    check_exit_code
    local subdirs=`ls $base_dir/checkin/$path`
    if [ "$subdirs" ] ; then
      local subdir
      for subdir in $subdirs ; do
        local dir=$base_dir/checkin/$path/$subdir
        [ -d "$dir" ] && [ "$subdir" != 'CVS' ] && \
          create_dot_dir_files $path/$subdir $subdir
      done
    fi
    run_cmd cd ..
    echo "$program_name: left $name"
  }

# --------------------------------------------------------------------------------
# Functions implementing targets
# --------------------------------------------------------------------------------

# Converts all tex sources
function apply_mmtex
  {
    echo
    echo "======================================================================"
    echo "Applying mmtex"
    echo "======================================================================"
    echo

    # Compose mmtex command:
    local mmtex_call="$mmtex_cmd -rwF $mmtex_opts"
    [ "$force" ] && mmtex_call="$mmtex_call -f"

    # Change into top-level local checkin dir:
    run_cmd cd checkin/$mount_path
    echo "$program_name: changed into checkin/$mount_path"

    # Execute mmtex:
    echo "$program_name: calling mmtex:"
    $mmtex_call

    run_cmd cd $base_dir
    apply_mmtex_done=done
    echo "$program_name: applying mmtex done"
  }

# "Mounts" the contents to the global checkin tree
function mount_checkin
  {
    echo
    echo "======================================================================"
    echo "Mounting checkin"
    echo "======================================================================"
    echo
    create_checkin_dirs
    run_cmd cd $checkin_root
    echo "$program_name: changed into $checkin_root"
    rm -vf $sections_file
    link_checkin_dirs "$mount_path" "$extra_dirs"
    local extra_dir
    for extra_dir in $extra_dirs ; do
      link_checkin_dirs "$mount_path/$extra_dir" ""
    done
    run_cmd cd $base_dir
    mount_checkin_done=done
    echo "$program_name: mounting checkin done"
  }

# "Unmounts" the contents to the global checkin tree
function unmount_checkin
  {
    echo
    echo "======================================================================"
    echo "Unmounting checkin"
    echo "======================================================================"
    echo

    if [ -e $sections_file ] ; then
      run_cmd cd $checkin_root
      echo "$program_name: changed into $checkin_root"
      local sections="`cat $sections_file`"
      check_exit_code
      run_cmd rm -vrf $sections
      run_cmd cd $base_dir
    else
      echo "No file $sections_file found"
      echo "Not mounted yet?"
    fi
    unmount_checkin_done=done
    echo "$program_name: unmounting checkin done"
  }

# Creates the distribution
function create_dist
  {
    echo
    echo "======================================================================"
    echo "Creating distribution"
    echo "======================================================================"
    echo
    [ "$release" ] || error "No release specified"
    run_cmd cd $base_dir
    run_cmd mkdir -pv dist
    run_cmd cd dist
    echo "$program_name: Changed into dist/"
    echo "$program_name: Checking-out release"
    local dist_name="@package-name@_${release}"
    local archive="${dist_name}.tgz"
    local tag="ver-`echo $release | tr '.' '-'`"
    run_cmd rm -rfv $dist_name
    run_cmd rm -fv $archive
    local cvscmd=cvs
    [ "$cvsroot" ] && cvscmd="cvs -d $cvsroot"
    run_cmd $cvscmd export -r $tag japs_content
    run_cmd mv -v japs_content $dist_name
    echo "$program_name: Creating version file"
    run_cmd echo $release > $dist_name/$version_file
    echo "$program_name: Creating tgz"
    run_cmd tar czf $archive $dist_name
    run_cmd cd $base_dir
  }

# --------------------------------------------------------------------------------
# Functions implementing tasks
# --------------------------------------------------------------------------------

# Processes the targets
function process_targets
  {
    local target
    for target in $targets ; do
      case $target in
        mmtex)
          apply_mmtex ;;
        all)
          echo "Nothing to build" ;;
        install)
          echo "Nothing to install" ;;
        doc)
           ;;
        mount-checkin)
          mount_checkin ;;
        unmount-checkin)
          unmount_checkin ;;
        dist)
          create_dist ;;
        *)
          echo "ERROR: Unknown target: $target"
          exit 3 ;;
      esac
    done
    echo
    echo "$program_name: BUILD DONE"
    echo
  }

function print_variables
  {
    cat <<EOF
checkin_root      = $checkin_root
cvsroot           = $cvsroot
doc_dir           = $doc_dir
force             = $force
ignore_deps       = $ignore_deps
mmtex_cmd         = $mmtex_cmd
mmtex_opts        = $mmtex_opts
prefix            = $prefix
release           = $release
targets           = $targets
task              = $task
EOF
  }

function show_targets
  {
cat <<EOF
all                Does nothing, exists only for comliance with other Mumie
                   packages
install            Does nothing, exists only for comliance with other Mumie
                   packages
mount-checkin      Adds the contents to the global checkin tree
unmount-checkin    Removes the contents from the global checkin tree
mmtex              Applies mmtex to all tex sources
dist               Creates a distribution
EOF
  }

function show_help
  {
    cat <<EOF
Usage:
  ./build.sh [OPTIONS] [TARGETS]
Description:
  Builds and/or installs the japs_content package, or parts of it. What is
  actually done is controlled by TARGETS, which is a list of keywords called
  targets. Type ./build.sh -t to get a list of all targets. The default target
  is "all"; it is assumed if no targets are specified.
Options:
  --targets, -t
      List all targets
  --force, -f
      Create files even if they are up-to-date.
  --ignore-deps, -D
      Ignore target dependencies. If a target is build with this option,
      then targets required by this target are not build automatically.
  --javac-verbose
      Turns the "verbose" flag on when compiling the java sources.
  --javac-debug
      Turns the "debug" flag on when compiling the java sources.
  --javac-deprecation
      Turns the "deprecation" flag on when compiling the java sources.
  --release=VERSION_NUMBER
      Set the release for the distribution to build. In effect only with
      the "dist" target, otherwise ignored.
  --cvsroot=CVSROOT
      Set the cvs root for retrieving the distribution to build. In effect
      only with the "dist" target, otherwise ignored. If not set, the
      environment variable \$CVSROOT is used
  --vars
      Prints the build variables to stdout
  --help, -h
      Print this help text and exit.
  --version, -v
      Print version information and exit.
EOF
  }

function show_version
  {
    echo $program_version
  }

$task
