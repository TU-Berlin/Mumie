/*
 * The MIT License (MIT)
 * 
 * Copyright (c) 2010 Technische Universitaet Berlin
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package net.mumie.japs.client;

import java.net.HttpURLConnection;

/**
 * Thrown when the {@link JapsClient} encounters a problem.
 * @author Tilman Rassy <a href="mailto:rassy@math.tu-berlin.de">rassy@math.tu-berlin.de</a>
 * @version <code>$Revision: 1.6 $</code>
 */

public class JapsClientException extends Exception
{
  /**
   * Creates a new <code>JapsClientException</code> with message <code>description</code>.
   */

  public JapsClientException (String description)
  {
    super(description);
  }

  /**
   * Creates a new <code>JapsClientException</code> that wraps <code>throwable</code>.
   */

  public JapsClientException (Throwable throwable)
  {
    super(throwable);
  }

  /**
   * <p>
   *   Creates a new <code>JapsClientException</code> indicating that the connection to the
   *   server has failed. The message has the form:
   * </p>
   * <pre>  cause + " (URL: " + connection.getURL() + ")"</pre>
   *
   * @param cause an explanation why the connection has failed.
   */

  public JapsClientException (HttpURLConnection connection, String cause)
  {
    super(cause + " (URL: " + connection.getURL() + ")");
  }

  /**
   * <p>
   *   Creates a new <code>JapsClientException</code> indicating that the connection to the
   *   server has failed. The message has the form:
   * </p>
   * <pre>  cause + " (URL: " + connection.getURL() + ")"</pre>
   * <p>
   *   where <code>cause</code> is autogenerated by
   *   {@link #composeDefaultCause(java.net.HttpURLConnection) composeDefaultCause(connection)}.
   * </p>
   */

  public JapsClientException (HttpURLConnection connection)
  {
    this(connection, composeDefaultCause(connection));
  }

  /**
   * <p>
   *   Auxiliary method to autogenerate the cause in
   *   {@link #JapsClientException(java.net.HttpURLConnection) JapsClientException(connection)}.
   * </p>
   * <p>
   *   The cause is autogenerated as follows. Let <code><var>responseCode</var></code> and
   *   <code><var>responseMessage</var></code> be the strings returned by 
   *   {@link java.net.HttpURLConnection#getResponseCode connection.getResponseCode()}
   *   (converted to a string) and
   *   {@link java.net.HttpURLConnection#getResponseMessage connection.getResponseMessage()},
   *   respectively, and let <code><var>errorDescription</var></code> the value of the
   *   {@link JapsResponseHeader#ERROR} resopnse header. Then
   * </p>
   * <ul>
   *   <li>
   *     If <code><var>errorDescription</var> is not <code>null</code>, the cause is
   *     <code><var>errorDescription</var>.
   *   </li>
   *   <li>
   *     Ohterwise, if <code><var>responseCode</var></code> is not <code>null</code>, the
   *     cause is <code><var>responseCode</var> + " " + <var>responseMessage</var></code>.
   *   </li>
   *   <li>
   *     Otherwise, the cause is <code><var>responseCode</var>.
   *   </li>
   *   <li>
   *     If an exception occurs while composing the cause, the cause is set to
   *     <code>"unknown cause"</code>
   *   </li>
   *  </ul>
   */

  protected static String composeDefaultCause (HttpURLConnection connection)
  {
    String cause = null;
    try
      {
        cause = connection.getHeaderField(JapsResponseHeader.ERROR);
        if ( cause == null )
          {
            String responseMessage = connection.getResponseMessage();
            cause =
              connection.getResponseCode() +
              (responseMessage != null ? " " + responseMessage : "");
          }
      }
    catch (Exception exception)
      {
        cause = "unknown cause";
      }
    return cause;
  }
}
